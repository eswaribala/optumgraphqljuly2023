schema {
    query: Query
    mutation:  Mutation
}

scalar  Date
scalar Long
interface Customer{
    customerId: Long
    name: FullName
    email: String
    password: String
    contactNo: Long
}


type FullName{
    firstName: String
    lastName: String
    middleName: String
}

type Individual implements Customer{
    customerId: Long
    name: FullName
    email: String
    password: String
    contactNo: Long
    gender:Gender,
    dob: Date

}

input IndividualInput{
    name: FullNameInput
    email: String
    password: String
    contactNo: Long
    gender:Gender,
    dob: Date
}

input  FullNameInput{
    firstName: String
    lastName: String
    middleName: String
}

enum Gender{
    MALE,FEMALE,TRANSGENDER
}

type Query{
    findAllIndividuals:[Individual]
    findIndividualById(customerId:Long):Individual
    findIndividualByContactNo(contactNo:Long):[Individual]
    findIndividualByFirstName(firstName:String):[Individual]
}


type Mutation {

    addIndividual(individualInput:IndividualInput):Individual
    updateIndividual(customerId:Long, email:String): Individual
    deleteIndividual(customerId:Long):Boolean

}